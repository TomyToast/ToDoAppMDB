{"version":3,"sources":["components/toDoList.js","components/toDoItem.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","_this$props","this","props","currentItem","handleInput","addNote","removeNote","clearNote","react_default","a","createElement","Fragment","onSubmit","value","text","placeholder","onChange","className","type","name","onClick","Component","ToDoItem","elements","list","map","element","ind","mdbreact_esm","key","style","width","concat","color","href","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","itemText","target","setState","item","Date","now","handleAddNote","preventDefault","console","log","newItem","state","items","toConsumableArray","alert","handleRemoveNote","length","pop","handleClearNote","toDoList","toDoItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed78dfef.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ToDoList extends Component {\n\n    render() {\n\n        const { currentItem,\n                handleInput,\n                addNote,\n                removeNote,\n                clearNote\n                } = this.props\n\n      return (\n        <>\n            <form onSubmit={addNote}>\n                <input\n                    value={currentItem.text}\n                    placeholder=\"Add note here...\"\n                    onChange={handleInput}\n                />\n                <button className=\"btn btn-sm success-color\" type=\"submit\" name=\"submit\">Add note</button>\n            </form>\n            <button className=\"btn btn-sm warning-color-dark\" onClick={removeNote} name=\"remove\">Remove</button>\n            <button className=\"btn btn-sm danger-color\" onClick={clearNote} name=\"clear\">Clear</button>\n        </>\n      );\n    }\n  }\n\n  export default ToDoList;","import React, { Component } from 'react';\nimport { MDBAnimation,\n         MDBCard,\n         MDBCardBody,\n         MDBCardTitle,\n         MDBCardText,\n         MDBBtn } from \"mdbreact\";\n\nclass ToDoItem extends Component {\n\n    render() {\n        const { list } = this.props\n        const elements = list.map( (element, ind) => {\n            return (\n                <MDBAnimation type=\"pulse\" key={element.key}>\n                    <MDBCard style={{ width: \"22rem\" }}>\n                    <MDBCardBody className=\"grey mb-1\">\n                        <MDBCardTitle className=\"cardTitle\">\n                            {`Task number ${ind + 1}`}\n                        </MDBCardTitle>\n                        <MDBCardText className=\"cardText\">\n                            {`${element.text}`}\n                        </MDBCardText>\n                        <MDBBtn color=\"grey\" href=\"#\">More...</MDBBtn>\n                    </MDBCardBody>\n                    </MDBCard>\n                </MDBAnimation>\n            )\n        })\n      return (\n        <ul>\n            {elements}\n        </ul>\n      );\n    }\n  }\n\n  export default ToDoItem;","import React, { Component } from 'react';\nimport ToDoList from './components/toDoList';\nimport ToDoItem from './components/toDoItem';\nimport './App.css';\nimport { MDBContainer } from \"mdbreact\";\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      list: [],\n      item: { key: '', text: '' }\n    }\n  }\n\n  handleInput = (e) => {\n    const itemText = e.target.value;\n\n    this.setState({\n      item: { key: Date.now(), text: itemText }\n    })\n  }\n\n  handleAddNote = (e) => {\n    e.preventDefault();\n    console.log('works submit here!');\n    const newItem = this.state.item;\n\n    if (newItem.text !== ''){\n      const items = [...this.state.list, newItem]\n      this.setState({\n        list: items,\n        item: { key: '', text: '' }\n      })\n    } else {\n      alert(\"Add note!\")\n    }\n  }\n\n  handleRemoveNote = (e) => {\n    e.preventDefault();\n    const { list } = this.state\n    if (list.length !== 0){\n      list.pop();\n      this.setState({\n        list: list,\n      })\n    } else {\n      alert(\"There is no Note to remove!\");\n    }\n  }\n\n  handleClearNote = (e) => {\n    e.preventDefault();\n    const { list } = this.state\n    if(list.length !== 0){\n      this.setState({\n      list: []\n    })\n      alert(\"All Notes deleted\");\n    } else {\n      alert(\"There is no Note to remove!\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App blue-grey lighten-5\">\n        <MDBContainer>\n          <ToDoList\n          className=\"aqua-gradient\"\n          currentItem={this.state.item}\n          handleInput={this.handleInput}\n          addNote={this.handleAddNote}\n          removeNote={this.handleRemoveNote}\n          clearNote={this.handleClearNote}\n        />\n        <ToDoItem\n          list={this.state.list}\n        />\n        </MDBContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport \"./assets/scss/mdb.scss\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}